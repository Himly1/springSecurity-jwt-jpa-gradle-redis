#配置#
#定义了日志输入的等级,通常来讲只分为四种,ERROR、WARN、INFO、DEBUG,比如在这里定义了INFO级别
# 则应用程序中所有DEBUG级别的日志信息将不被打印出来
#其次x表明的是输入日志到哪个地方
log4j.rootLogger=INFO,console,fileError,fileWar

#输入日志到控制台#
#首先appender设置日志的目的地,有以下几种
#org.apache.log4j.ConsoleAppender(控制台)
#org.apache.log4j.FileAppender(文件)
#org.apache.log4j.DailyRollingFileAppender(每天产生一个日志文件)
#org.apache.log4j.RollingFileAppender(文件大小到指定尺寸的时候产生一个新文件),可通过log4j.appender.R.MaxFileSize=100kb设置文件大小,还可通过log4j.appender.R.MaxBackupIndex=1设置为保存一个备份文件。
#org.apache.log4j.WriterAppender(将日志信息已流格式发送到任意指定的地方)
log4j.appender.console=org.apache.log4j.ConsoleAppender
#layout负责格式化appender的输出,有以下几种
#org.apache.log4j.HTMLLayout(已HTML表格形式布局)
#org.apache.log4j.PatternLayout(可以灵活地指定布局模式)
#org.apache.log4j.SimpleLayout(包含日志信息的级别 和信息字符串)
#org.apache.log4j.TTCCLayout(包含日志产生的时间、线程、类别等等信息)
log4j.appender.console.layout=org.apache.log4j.PatternLayout
#如果使用PatternLayout就需要指定格式,格式参数如下
#%m 输出代码中指定的消息
#%M 输出打印该条日志的方法名
#%p 输出优先级, 即DEBUG, INFO, WARN, ERROR, FATAL;
#%r 输出自应用启动到输出 该log信息耗费的毫秒数;
#%c 输出所属的类目, 通常就是所在类的全名
#%t 输出产生该日志事件的线程名
#%n 输出一个回车换行符, windows平台为”rn“ , Unix平台为”n“;
#%d 输出日志时间点的日期或时间, 默认格式为ISO8601,也可以在其后指定格式,比如： %d{yyyy-MM-dd HH:mm:ss,SSS},输出类似：2016-8-20 22:52:55,921;
#%|输出日志事件的发生位置,及在代码中的行数。
log4j.appender.console.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss,SSS} %5p %c:%L - %m%n